;+
;
; Function that returns halo mass information using the ST
; approximation and the formalism summarized in Dekel&Birnboim 2006
; appendix. This is a idl version of the code written by Dekel. 
;
; INPUT:
; mass   --> log10 halo mass (H0 is applied)
; z      --> redshift used 
; EXTRA  --> all the cosmology supported by common
; H0     --> Redefine H0
; prec   --> precision used in the integration of mass function
;            (default 0.01)
;
;
; OUTPUTS:
; ncum   --> the cumulative number densitites of halos  from mass to infinity
; ndens  --> the halo mass function in bins of 0.1 dex
; emstar --> the characteristic mass 
; sigma  --> sigma(M)
;
; KEYWORD:
; silent --> Suppress messages
;-




;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Here there are a bunch of subroutine
;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;ez2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
function ez2, z
common cos, omm,oml,h,sigma8,signorm,rho0
ez2= oml +(1.-oml-omm)*(1.+z)^2 +omm*(1.+z)^3
return, ez2
end
  

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Compute the approximated power spectrum
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
function pk, rk

common cos, omm,oml,h,sigma8,signorm,rho0

q=rk/(omm*h^2) 
sog=1.+3.89*q+(16.1*q)^2+(5.46*q)^3+(6.71*q)^44
t=alog(1.+2.34*q)/(2.34*q)/sog^(0.25)
pk=signorm^2*rk*t^2

return, pk
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Compute the filter function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
function w, x
w=3.*(sin(x)-x*cos(x))/x^3
return, w
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Define the integrand of sigma(R)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
function su, rk, rs
su=rk^2*pk(rk)*w(rk*rs)^2
return, su
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;compute sigma(R) integrating over power spectrum
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
function sig, rs
;;set the boundary and precision
rklmin=-3. 
rklmax=2.-alog10(rs)
dkl=0.001
rkmin=10.^(rklmin)
rkmax=10.^(rklmax)

;;make the integral with trapezoid rule
sum=0.5*dkl*(rklmin*su(rkmin,rs)+rklmax*su(rkmax,rs))
for rkl=rklmin+dkl, rklmax-dkl, dkl do begin
    rk=10.^rkl
    sum=sum+dkl*rk*su(rk,rs)
endfor

;;set final values
sig2=sum/2./!pi^2*alog(10.)
sig=sqrt(sig2)
return, sig
end



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;normalize to sigma8 (variable)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
pro signor, sigma8, h, signorm
;;call once before emstar
rs=8./h
signorm=1.
sig8=sig(rs)
signorm=sigma8/sig8
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Cosmological constants with redhsift
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
function ommz, z
common cos, omm,oml,h,sigma8,signorm,rho0
ommz=omm*(1.+z)^3/ez2(z)
return, ommz
end

function omlz, z
common cos, omm,oml,h,sigma8,signorm,rho0
omlz=oml/ez2(z)
return, omlz
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Compute D(a)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
function dz, z
common cos, omm,oml,h,sigma8,signorm,rho0
omz=ommz(z)
olz=omlz(z)
gz=2.5*omz/(omz^(4./7.)-olz+(1.+omz/2.)*(1.+olz/70.))
g0=2.5*omm/(omm^(4./7.)-oml+(1.+omm/2.)*(1.+oml/70.))
dz=gz/(g0*(1.+z))
return, dz
end


;;;;;;;;;;;;;;;;;
;Delta z
;;;;;;;;;;;;;;;;;
function delta, z
common cos, omm,oml,h,sigma8,signorm,rho0
a=1./(1.+z)
ommz=omm/a^3/ez2(z)
x=ommz-1.
delta=(18.*!pi^2 +82.*x-39.*x^22)/(1.+x)
return, delta
end

 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Get sigma m
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
function sigm, em
common cos, omm,oml,h,sigma8,signorm,rho0
third=1./3.
rs=(em/(4.*!pi/3.)/rho0)^third
sigm=sig(rs)
return, sigm
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;mstar
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function emstar, z
;;signorm defined by signor
;;emstar in units of 10^11
common cos, omm,oml,h,sigma8,signorm,rho0
third=1./3.
un=1. ; nu
aa=1./(1.+z)/(delta(z)/200.*omm/0.3 *(h/0.7)^2)^third  
sigc=1.69/dz(z)/un
em0=130.*(un*dz(z))^8/100. ;low bound good z=0-6. For z=10 do **10(?) 
em=em0
dm=em0
sigma=1D99
while(sigma gt sigc) do begin
    em=em+dm
    rs=0.143 *(200. *em /(omm/0.3*(h/0.7)^2))^third
    sigma=sig(rs)
endwhile


if(em eq em0+dm) then begin
    splog, 'em0 too big!'
    stop
endif
emstar=em-0.5*dm
return, emstar
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;
; This is the main
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



function psn, mass, z, _EXTRA=extra , ncum=ncum, ndens=ndens, emstar=emstar, $
              sigma=sigma, silent=silent, H0=H0, prec=prec

;;defualt
if ~keyword_set(prec) then prec=0.01
 

;;start the cosmology
common cosmolgy_cmmn, cosm_dm, cosm_K, cosm_h, cosm_Ob, cosm_L, cosm_r, sigma_8
m_cosm_common, H0=h0, _EXTRA=extra, SILENT=silent


;;define a second common used by the code
common cos, omm,oml,h,sigma8,signorm,rho0


;;set min and max mass in 10^11 units. Set step for integration in
;;trapezoid rule 
eminl=mass-11D
emaxl=6D
deml=prec

;;;force a ST function and applies h everywhere
;ist=1
;mpch=0

;;set the cosmology to the common used in the code
omm=cosm_dm
h=cosm_h*1D
sigma8=sigma_8*1D
fb=0.1
delc=1.686

;;derive cosmology related quantites
oml=1.0-omm
rho0=2.76*omm*h^2          ;units of 10^11 M_solar / (Mpc)^3  comoving
h0=0.0716*(h/0.7)          ;1/Gyr

;;normalize by sigma8
signor, sigma8, h, signorm 


;;integrated to get the total number density
enn=0.
for eml=eminl+deml, emaxl, deml do begin
   em=10.^eml
   un=delc/dz(z)/sigm(em)
   un=0.841*un
   fst=0.322*(1.+1./un^0.6)*0.841
   eml1=eml-0.5*deml
   eml2=eml+0.5*deml
   em1=10.^eml1
   em2=10.^eml2
   sigp=(sigm(em2)-sigm(em1))/deml ; note d/dlogM 
   dundm=-delc/dz(z)*sigp/sigm(em)^2
   en=fst*sqrt(2./!pi)*rho0/em*dundm*exp(-0.5*un^2) 
   enn=enn+en*deml
endfor

stop


;;Finish the job
eml=eminl
em=10.^eml
un=delc/dz(z)/sigm(em)
un=0.841*un
fst=0.322*(1.+1./un^0.6)*0.841
eml1=eml-0.5*deml
eml2=eml+0.5*deml
em1=10.^eml1
em2=10.^eml2
sigp=(sigm(em2)-sigm(em1))/deml
dundm=-delc/dz(z)*sigp/sigm(em)^2
en=fst*sqrt(2./!pi)*rho0/em*dundm*exp(-0.5*un^2)
enn=enn+en*deml*0.5
emst=emstar(z)



;;print 
print, "Mstar", emst
print, "Ndens", enn




end

;       write(*,102) enn,emst                    
;   102 format(2e15.4)
;       go to 10
;       end

; cccccccccccccccccc
;       function zac(zsf)
; c  delay between accretion and SF
;       common/cos/omm,oml,h,sigma8,signorm,rho0
;       asf=1./(1.+zsf)
;       tac=0.8*tuniv(asf)  ! R/V ~ 0.185*t_u
;       aac=az(tac)
;       zac=1./aac-1.
;       return
;       end

; ccccccccccccccccccccccccccccccccccc
;       function ac(em,z)
; c A = dot{M}/M /(dot{D}/D)
;       common/cos/omm,oml,h,sigma8,signorm,rho0
;       pi=4.*atan(1.)
;       sigmas=1.69/dz(z)
; c     ems=emstar(z)
; c     sigmas=sigm(ems)
;       ac=sqrt(2./pi) *sigmas /sqrt(sigm(em/2.2)**2-sigm(em)**2)
;       return
;       end

;       function aca(em,z)
; c power-law approximation
;       common/cos/omm,oml,h,sigma8,signorm,rho0
;       pi=4.*atan(1.)
;       en=-2.1
;       al=(en+3.)/6.
;       ems=emstar(z)
;       aca=sqrt(2./pi) /sqrt(2.2**(2.*al)-1.) *(em/ems)**al
;       return
;       end

; cccccccccccccccccccccccccccccccccc
;       function ddot(z)
; c dot{D}/D
;       common/cos/omm,oml,h,sigma8,signorm,rho0
;       ez=sqrt(ez2(z))
;       h0=0.0716*(h/0.7)  ! 1/Gyr
;       om=ommz(z)
;       om7=om**(-3./7.)
;       ddot=h0*ez*(1.+ (9./7.)*om7*(om-1.)/(om7+1.5))
;       return
;       end




;       function az(t)
;       common/cos/omm,oml,h,sigma8,signorm,rho0
; c inverse of tuniv(a)
;       amax=1.1  ! make bigger if wants further into the future
;       t0=tuniv(amax)   
;       a=amax*(t/t0)**(2./3.) ! initial guess as upper limit
;       al=alog10(a)
;       dal=0.0001
;       tn=tuniv(a)
;    10 continue
;       to=tn
;       al=al-dal
;       if(a.le.0.) then
;        write(*,*) 'az stop: a.lt.0'
;        stop
;       endif
;       a=10.**al
;       tn=tuniv(a)
;       if((tn-t)*(to-t).gt.0.) go to 10
;       azl=al-dal +dal* alog10(t/to)/alog10(tn/to)
;       az=10.**azl
;       return
;       end

;       function tuniv(a)
; c     for omm.le.1.
;       common/cos/omm,oml,h,sigma8,signorm,rho0
;       z=1./a-1.
;       om=ommz(z)
;       if(om.eq.1.) then
;        t=2./3.
;       else
;        om1=1.-om
;        om2=sqrt(om1/om)
;        s=alog(om2+sqrt(om2**2+1.))
;        t=2./3. *s /sqrt(om1)
;       endif 
;       hh=hz(a) *100.*1.e+5 /(3.086*1.e+24)  ! from (100 km/s/Mpc) to (1/s)
;       hh1=1./hh/(3.156*1.e+7)/1.e+9 ! from 1/s to 1/Gyr
;       tuniv=t*hh1
;       return
;       end

;       function hz(a)
;       common/cos/omm,oml,h,sigma8,signorm,rho0
;       hz=h*sqrt(oml+omm/a**3)
;       return
;       end

