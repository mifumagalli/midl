;+
;
;
;procedure that for a given ROTATOR position, make the frame
;
;                  N
;                  ^
;                  |        
;                  |     
;            E <----
;
;
;
;-


pro img_esi_rotate, sci, wgt, rotpos, xlim, ylim, header=header

  ;;make this always positive
  pa_real=rotpos
  if(pa_real lt 0) then pa_real=360+pa_real
  
  ;;decide if image is rotated by multiple of 90 or 
  ;;by arbitrary angle 
  arbitrary=pa_real mod 90.
  
  ;;allow for 2 deg offsets
  if(arbitrary le 2 or arbitrary gt 88) then begin
     
     ;;if image is rotated by multiple of 90, avoid 
     ;;adding additional interpolation 
     
     ;;get the multiple of 90 you have to rotate for
     rot_ang=round(pa_real/90.)
     ;;make the rotation counterclockwise
     rot_ang=4-rot_ang
     ;;make the 360 angle a 0
     if(rot_ang eq 4) then rot_ang=0
     ;;take out an extra  90 degrees
     rot_ang=rot_ang+1
     if(rot_ang eq 4) then rot_ang=0
     ;;make the rotation
     sci=rotate(sci,rot_ang)
     wgt=rotate(wgt,rot_ang)
     ;;final reverse the X axis 
     sci=reverse(sci,2)  
     wgt=reverse(wgt,2)  
     
     ;;update the ccd limits if angle 1 and 3
     if(rot_ang eq 1 or rot_ang eq 3) then begin
        tmp=xlim
        xlim=ylim
        ylim=tmp
     endif
     
  endif else begin 
     
     stop
     
  endelse 
  

  ;;update header
  news=size(sci)
  sxaddpar, header, 'NAXIS1', news[1]
  sxaddpar, header, 'NAXIS2', news[2]
  
end

