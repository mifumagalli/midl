;+
;
;Prcedure that reduce imaging from different telescopes doing the
;basic of bias,flat,gain.
;
;Instrument supported: keck/LRIS (CCD >July 2009)
;                      keck/LRIS (CCD <July 2009)
;                      LBC/LBT   (September 2009)                      
;                      ESI       (Jan 2012)
;                      FEINC     (Jul 2012) 
;
;A structure status keep track of what has been done and what not	
;to recover from interruptions.
;
;INPUT
;instr    --> the instrument you use
;plan     --> plan file created by img_makeplan
;gzip     --> if set gzip the final images
;path     --> path with the data
;archflat --> set to an array of name with archival flats (one per filter) if no flats are taken
;clobber  --> start over all redux 
;
;-

PRO img_ccdproc, plan, instr=instr, gzip=gzip, path=path, archflat=archflat,$
                 notweakgain=notweakgain, clobber=clobber, nocr=nocr

;;set default
if ~keyword_set(plan) then plan='obsplan.log'
if ~keyword_set(instr) then instr='LRIS'
if ~keyword_set(path) then path='../Raw/'

;;read the logfile
readcol, plan, name, filt, time, obj, type, side, $
  format='A,A,F,A,A,A,A', /silent

;;load instrument info
common ccdinfo, xfull,yfull,nchip,namp,biaslev,satur, goodata
img_ccdinfo, instr, path, name, side

;;get name to append to flats and stuff
p=strpos(plan,".log")
root=strmid(plan,0,p)

;;set log file
splog, 'Start reduction at '+systime(), filename=root+'redux.log', /append

;;make proc dir
spawn, 'mkdir -p proc'

;;find number of sides
allside=find_different(side,/str)
numside=n_elements(allside)

;;find max number of filters
allfilter=find_different(filt,/str)
maxfilt=n_elements(allfilter)


;;make recovery structures on each side
for sid=0, numside-1 do begin
     
    ;;find science, bias and flat
    bias=where(type eq 'bia' and side eq allside[sid], nbias)
    flat=where(type eq 'fla' and side eq allside[sid], nflats)
    science=where(type eq 'sci' and side eq allside[sid], nsci)
    
    ;;check if status str exists
    strname=allside[sid]+root+"status.str"
    
    aa=file_search(strname,count=cc)
    if (cc eq 0 or keyword_set(clobber)) then begin
        ;;create status structure 
        splog, "Creating new STATUS structure for side ", allside[sid]
        status={biasmed:0,flat:0,filflat:strarr(maxfilt),img:make_array(n_elements(name),/integer,value=0)}
        mwrfits, status, strname, /create
     endif else begin
        splog, "STATUS structure found. Continuing reduction ", strname
        status=mrdfits(strname,1,/silent)
     endelse

 endfor
 ;;----


;-----------------------------------------------------------------------
;make bias on each sides

  ;;------  
 for sid=0, numside-1 do begin
    
     splog, 'Work on bias for side ', allside[sid]
     
     ;;open status
     strname=allside[sid]+root+"status.str"
     status=mrdfits(strname,1,/silent)
     ;;find bias
     bias=where(type eq 'bia' and side eq allside[sid],nbias)
     
  ;;----
     
     ;;check if bias already exists 
     if(status.biasmed eq 1) then  begin
         splog, "Using exisiting median bias."
         biasmedian=mrdfits('proc/'+allside[sid]+root+"medbias.fits",0,/silent)
     endif   
     
     if(status.biasmed eq 2) then  splog, "No bias frame. Use overscan only!"
     

     if(nbias gt 0 and status.biasmed eq 0) then begin
         img_makebias, name[bias], biasmedian, root=root, side=allside[sid], path=path, instr=instr
         splog, "Done with median bias for side ", allside[sid]
         status.biasmed=1
     endif 

     if(nbias eq 0 and status.biasmed eq 0) then begin
         splog, "No bias frame. Use overscan only"
         status.biasmed=2
     endif   
     
     ;;update structure
     mwrfits, status, strname, /create
     
     
 endfor
  
 splog, 'All done with bias!'
 
;---------------------------------------------------
;make flat for both sides

 ;;------  
 for sid=0, numside-1 do begin
     
     splog, 'Work on flats for side ', allside[sid]
     
     ;;open status
     strname=allside[sid]+root+"status.str"
     status=mrdfits(strname,1,/silent)
     
     ;;find flat
     flat=where(type eq 'fla' and side eq allside[sid],nflats)
     
  ;;----
  
  
     ;;check if flats already exists 
     
     if(status.flat eq 1) then  splog, "Using exisiting flats."
     if(status.flat eq 2) and ~keyword_set(archflat) then begin
         splog, "No flats found..."
         splog, "Please, provide archival flats"
         return
     endif
     
     if(status.flat eq 0 and nflats GT 0) then begin
         
         ;;set min and max values to accept a flat as good 
         minmax_flat=[biaslev*2,satur-1000]
         
         ;;Use oscan only when possible. Typically this is the lower
         ;;noise solution 
         splog, 'Use oscan bias only (lower noise)'
         img_makeflats, name[flat], filt[flat], status=status,$
           root=root, minmax=minmax_flat, side=allside[sid], path=path, instr=instr
         
         splog, "All done with flats"
         status.flat=1
     endif  
     
     if(status.flat eq 0 and nflats EQ 0) and ~keyword_set(archflat) then begin
         splog, "No flats found... I cannot reduce data without flats!"
         splog, "Please, provide archival flats"
         return
     endif
     
     if keyword_set(archflat) then begin
         splog, 'Using archival flats '+archflat 
         status.flat=2
     endif

     ;;update structure
     mwrfits, status, strname, /create
 endfor
 
 splog, 'All done with flats!'

;;------------------------------------------------------  
;;make science frame
  
 for sid=0, numside-1 do begin
     
     splog, 'Work on science for side ', allside[sid]
     
     ;;open status
     strname=allside[sid]+root+"status.str"
     status=mrdfits(strname,1,/silent)
     
     ;;find science
     science=where(type eq 'sci' and side eq allside[sid], nsci)
     
     ;;----
     splog, 'Use oscan bias only (lower noise)'
     
     if(nsci gt 0) then begin
         ;;loop on each science frame
         for img=0, nsci-1 do begin

            ;;check if file exists 
            finname=strmid(name[science[img]],0,strpos(name[science[img]],'.fits'))+"_redux.fits"
            chk=file_test("proc/"+finname)
            if(status.img[img] eq 1 and  chk gt 0 ) then  splog, "Found previously reduced frame ", $
               name[science[img]] else begin
                 
                 ;;Keep the noise low. Use oscan only
                img_makescience, name[science[img]], filt[science[img]], $
                                 time[science[img]], status=status,$
                                 gzip=gzip, root=root, side=allside[sid], path=path,$
                                 object=obj[science[img]], instr=instr, notweakgain=notweakgain, nocr=nocr
                ;;update structure
                status.img[img]=1
                mwrfits, status, strname, /create
             endelse
          endfor
      endif else begin
         splog, "No science frame for ", allside[sid]
         return
      endelse
   endfor
 
 splog, 'All done with data reduction at '+systime(), /close
 
end
